import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Reshape, Flatten, Dropout
from tensorflow.keras.layers import BatchNormalization, Activation, ZeroPadding3D
from tensorflow.keras.layers import LeakyReLU
from tensorflow.keras.layers import UpSampling3D, Conv3D
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.optimizers import Adam
import numpy as np
import os
import sys
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def build_generator():

model = Sequential()

model.add(Dense(128 * 16 * 16 * 16, activation=”relu”, input_dim=100))
model.add(Reshape((16, 16, 16, 128)))
model.add(UpSampling3D())
model.add(Conv3D(64, kernel_size=3, padding=”same”))
model.add(BatchNormalization(momentum=0.8))
model.add(Activation(“relu”))
model.add(UpSampling3D())
model.add(Conv3D(32, kernel_size=3, padding=”same”))
model.add(BatchNormalization(momentum=0.8))
model.add(Activation(“relu”))
model.add(Conv3D(1, kernel_size=3, padding=”same”))
model.add(Activation(“tanh”))

noise = Input(shape=(100,))
object3D = model(noise)

return Model(noise, object3D)

def generate_object(model, iterations, batch_size=128, save_interval=50):

# Load and normalize images
x_train = np.load(‘images.npy’) / 127.5–1.

# Generate 3D objects
for iteration in range(iterations):

# Select a random batch of images
idx = np.random.randint(0, x_train.shape[0], batch_size)
images = x_train[idx]

# Generate noise
noise = np.random.normal(0, 1, (batch_size, 100))

# Generate 3D objects from noise
generated_objects = model.predict(noise)

# Save generated 3D objects
if iteration % save_interval == 0:
fig = plt.figure()
ax = fig.add_subplot(111, projection=’3d’)
ax.voxels(generated_objects[0, :, :, :, 0] > 0, edgecolor=’k’)
plt.savefig(“generated_object_%d.png” % iteration)
plt.close()

if _name_ == ‘_main_’:

# Build the generator model
generator = build_generator()

# Compile the generator model
generator.compile(loss=’binary_crossentropy’, optimizer=Adam(0.0002, 0.5))

# Generate 3D objects
generate_object(generator, iterations=10000, batch_size=32, save_interval=50)
